<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[58沈剑的《架构师之路》学习笔记]]></title>
    <url>%2F2017%2F11%2F05%2F58%E6%B2%88%E5%89%91%E7%9A%84%E3%80%8A%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前段时间关注了58沈剑大牛的“架构师之路”的微信公众号，之前一直没时间认真拜读，现打算利用周末的时间学习一下，做一些笔记。本篇内容全部来自《架构师之路》，我只是在此摘抄记录一些知识点。感谢沈剑大牛的分享。 高可用架构高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。 方法论上，高可用是通过冗余+自动故障转移来实现的。整个互联网分层系统架构的高可用，又是通过每一层的冗余+自动故障转移来综合实现的，具体的： 【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移 【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移 【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移 【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性 【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移 【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移 负载均衡负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据【均匀】分摊到多个操作单元上执行，负载均衡的关键在于【均匀】。 【客户端层】到【反向代理层】的负载均衡，是通过“DNS轮询”实现的 【反向代理层】到【站点层】的负载均衡，是通过“nginx”实现的 【站点层】到【服务层】的负载均衡，是通过“服务连接池”实现的 【数据层】的负载均衡，要考虑“数据的均衡”与“请求的均衡”两个点，常见的方式有“按照范围水平切分”与“hash水平切分” 数据库 数据库使用规范 参见公众号里的文章《58到家数据库30条军规解读》 分库 hash取模：user_id%2=0为0库，user_id%2=1为1库。 数据分段：user_id属于[0, 1亿]为0库，属于[1亿, 2亿]为2库。 引入像mycat等数据库中间件 保证数据的安全性是DBA第一要务，需要进行： 全量备份+增量备份，并定期进行恢复演练，但该方案恢复时间较久，对系统可用性影响大 1小时延时从，双份1小时延时从能极大加速数据库恢复时间 个人建议1小时延时从足够，后台只读服务可以连1小时延时从，提高资源利用率 线程数究竟设多少合理 结论：N核服务器，通过执行业务的单线程分析出本地计算时间为x，等待时间为y，则工作线程数（线程池线程数）设置为 N*(x+y)/x，能让CPU的利用率最大化。 经验：一般来说，非CPU密集型的业务（加解密、压缩解压缩、搜索排序等业务是CPU密集型的业务），瓶颈都在后端数据库，本地CPU计算的时间很少，所以设置几十或者几百个工作线程也都是可能的。]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式基础]]></title>
    <url>%2F2016%2F08%2F06%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[参考： 正则表达式简明参考 PHP手册 模式修饰符 正则表达式30分钟入门教程 正则表达式在处理字符串以及一些软件配置的时候都非常有用，但隔段时间不用，就生疏了。今天抽空回顾和整理了下正则的基础知识，以便以后回顾。 元字符常见的元字符: 元字符 解释 备注 . 匹配除换行符以外的任意字符 + 匹配前面的子表达式一次或多次 * 匹配前面的表达式零次或多次 {n}; {n,}; {n,m} 匹配n次; 至少匹配n次; 至少匹配n次，最多匹配m次; \w 匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’ \W 匹配非字母、非数字、非下划线。等价于’[^A-Za-z0-9_]’ 反义 \s 匹配任意的空白符 \S 匹配任意的非空白符 反义 \d 匹配数字 \D 匹配非数字 反义 \b 匹配单词边界 \B 匹配非单词边界 反义 ^ 匹配字符串的开始 [^abc]匹配除abc以外的任意字符，此为反义 $ 匹配字符串的结束 转义想要在正则中用元字符本身，则可以通过\进行转义。\本身可通过\来转义 分支条件表达式|表达式，从左到右满足第一个表达式则不在匹配。 分组&amp;反向引用\b(\w+)\b\s+\1\b 用来匹配重复的单词，\1就是分组1，括号里面捕获的内容。 零宽断言（正向和负向）零宽断言表示匹配字符的时候再添加一些定位条件，使匹配更精准。 \w+(?=ing) 匹配以ing结尾的多个字符（不包括ing） \w+(?!ing) 匹配不是以ing结尾的多个字符 (?&lt;=re)\w+ 匹配以re开头的多个字符（不包括re） (?&lt;!re)\w+ 匹配不是以re开头的多个字符 (?&lt;=\s)\d+(?=\s) 匹配两边是空白符的数字，不包括空白符 贪婪&amp;懒惰小例子：字符串： AxxByyAxxBA.B ：匹配到AxxByyAxxBA.?B ：匹配到AxxB 贪婪 {m,n}、{m,}、?、*、+ 懒惰 {m,n}?、{m,}?、??、*?、+?， 尽可能少的匹配 模式修饰符详见：http://php.net/manual/zh/reference.pcre.pattern.modifiers.php i：忽略大小写(CASE_INSENSITIVE) x：忽略空格字符(COMMENTS) s：.匹配任意字符，包括换行符（DOTALL） m：多行模式（MULTILINE） 注释注释语法：(?#comment)，这个语法的内容会被正则忽略，用于注释含义。可以放在正则表达式的任意位置。]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于编程]]></title>
    <url>%2F2016%2F08%2F05%2F%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[看别人的代码，是一种非常有效的学习，可以扩展自己的思路]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程人生</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《浪潮之巅》读后小结]]></title>
    <url>%2F2016%2F07%2F07%2F%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E8%AF%BB%E5%90%8E%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[《浪潮之巅》应该是我迄今为止，遇到的最喜欢的书了，可能源自对世界之巅的巨头公司的崇拜。这本书主要是讲近百年来这些巨头公司的兴衰。我从中摘抄了一些我印象比较深的一些话，可能并非书中原话，但我感觉差不多也就是这个意思。 AT&amp;T 时代造就了伟大的公司（乱世出英雄，顺应时代，顺势而为） 当一个公司，没有人、机构、有绝对的控制权并为它负责的时候，这个公司就危险了 看一个上市公司的好坏，只要看最优秀的人，是流进这家公司还是流出这家公司即可 IBM IBM不断的优化甚至淘汰，长期亏损和不盈利的非核心业务 Apple 永远渴望，大智若愚 Microsoft 高手过招取胜之道，在于抓住对手的失误]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>浪潮之巅</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于职场]]></title>
    <url>%2F2016%2F07%2F01%2F%E5%85%B3%E4%BA%8E%E8%81%8C%E5%9C%BA%2F</url>
    <content type="text"><![CDATA[善于倾听，尤其是别人的意见甚至是批评，这是提高自己的最佳途径，工作之后给自己提建议的人并不多。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>职场生涯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;花名轻芒，是一个崇尚简单、喜爱编程、追求极致的人。大学时期利用业余时间主要在学习lnmp相关技术，开发过几个网站，拿过几个证书，也从此踏上了程序员之路 工作&emsp;&emsp;目前就职于高德地图，各种打杂 技能&emsp;&emsp;对各种编程语言、各种系统都有兴趣，玩过PHP、Golang、Python等，略懂前端 联系&emsp;&emsp;欢迎指正博客中存在的各种问题，邮箱：1060687053@qq.com]]></content>
  </entry>
  <entry>
    <title><![CDATA[分类]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[标签]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
