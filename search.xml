<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nginx的rewrite配置]]></title>
    <url>%2F2017%2F11%2F03%2Fnginx%E7%9A%84rewrite%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[参考： https://segmentfault.com/a/1190000008102599 http://seanlook.com/2015/05/17/nginx-location-rewrite/ 背景之前用yii2在框架层即可通过配置urlManager完成url的重写，最近一个纯php项目需要接入集团的单点登录，记录下nginx的rewrite的相关知识。 rewrite规则执行顺序： server块的rewrite指令 location匹配 匹配的location里的rewrite 如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。 location匹配 =开头表示精确匹配 ^~ 开头表示uri以某个常规字符串开头，不是正则匹配 ~ 开头表示区分大小写的正则匹配; ~* 开头表示不区分大小写的正则匹配 / 通用匹配,任何请求都会匹配到 rewrite的flag标志位 last 停止处理当前的rewrite的指令集，并开始搜索与更改后的URI相匹配的location; break 停止处理当前的rewite指令集 redirect 返回302临时重定向。 permanent 返回301永久重定向 小例子1234567891011121314151617181920212223242526272829303132333435server &#123; listen 9033; server_name xxx.com; root /home/admin/project; location / &#123; try_files $uri $uri/ /index.php$is_args$args; autoindex on; index index.php index.html index.htm; &#125; location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /\.(ht|svn|git) &#123; deny all; &#125; location ^~ /static/images &#123; rewrite ^/static(.*)$ /dev/$1 last; &#125; location ^~ /mis &#123; root /home/admin/project; fastcgi_pass 127.0.0.1:9001; fastcgi_index index.php; include fcgi.conf; rewrite ^/mis(/[^\?]*)?((\?.*)?)$ /mis/index.php$1$2 break; &#125;&#125;]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>rewrite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper伪分布式集群搭建]]></title>
    <url>%2F2017%2F10%2F26%2Fzookeeper%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前言ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，参见官网。典型应用场景，如目录服务、配置管理、同步、集群节点选举、消息队列、通知系统等。本文演示搭建一个单机三个实例的伪分布集群。 准备下载并解压zookeeper。创建三个目录，分别为这三个实例的目录环境，并在三个目录中创建内容分别为1，2，3的名称为myid文件。 1234567$tree zoo1/ zoo2/ zoo3zoo1/└── myidzoo2/└── myidzoo3└── myid 配置在zookeeper的配置目录下，分别创建三个名为zoo1.cfg、zoo2.cfg、zoo3.cfg的配置文件。以server.1=10.101.80.35:9110:9210为例，1为对应实例myid内容编号，10.101.80.35为ip，9110为Leader选举的端口，9210为zookeeper实例之间通信的端口，因搭建的伪分布式集群，所以端口各不相同，真实的分布式集群，三个实例的端口通常相同。 内容如下： 1234567891011121314151617181920212223242526272829303132zoo1.cfgtickTime=2000initLimit=10syncLimit=5dataDir=/home/admin/zookeeper/zoo1clientPort=2181server.1=10.101.80.35:9110:9210server.2=10.101.80.35:9111:9211server.3=10.101.80.35:9112:9212zoo2.cfgtickTime=2000initLimit=10syncLimit=5dataDir=/home/admin/zookeeper/zoo2clientPort=2182server.1=10.101.80.35:9110:9210server.2=10.101.80.35:9111:9211server.3=10.101.80.35:9112:9212zoo3.cfgtickTime=2000initLimit=10syncLimit=5dataDir=/home/admin/zookeeper/zoo3clientPort=2183server.1=10.101.80.35:9110:9210server.2=10.101.80.35:9111:9211server.3=10.101.80.35:9112:9212 启动1234567891011cd /home/admin/zookeeper/zookeeper-3.4.10./bin/zkServer.sh start ./conf/zoo1.cfg./bin/zkServer.sh start ./conf/zoo2.cfg./bin/zkServer.sh start ./conf/zoo3.cfg#查看状态$./bin/zkServer.sh status ./conf/zoo1.cfgZooKeeper JMX enabled by defaultUsing config: ./conf/zoo1.cfgMode: follower 命令行操作1234567891011121314151617181920212223242526272829303132333435363738394041#进入集群./bin/zkCli.sh -server 10.101.80.35:2182#创建节点[zk: 10.101.80.35:2182(CONNECTED) 3] create /mynode testCreated /mynode[zk: 10.101.80.35:2182(CONNECTED) 4] ls /[mynode, zookeeper]#查看所有节点[zk: 10.101.80.35:2182(CONNECTED) 7] ls /[mynode, zookeeper]#查看指定节点[zk: 10.101.80.35:2182(CONNECTED) 5] get /mynodetestcZxid = 0x100000004ctime = Thu Oct 26 20:38:29 CST 2017mZxid = 0x100000004mtime = Thu Oct 26 20:38:29 CST 2017pZxid = 0x100000004cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 4numChildren = 0#更新节点内容[zk: 10.101.80.35:2182(CONNECTED) 8] set /mynode hahacZxid = 0x100000004ctime = Thu Oct 26 20:38:29 CST 2017mZxid = 0x100000005mtime = Thu Oct 26 20:43:40 CST 2017pZxid = 0x100000004cversion = 0dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 4numChildren = 0]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yii2 php多进程 出现 MySQL server has gone away]]></title>
    <url>%2F2017%2F08%2F09%2Fyii2-php%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%87%BA%E7%8E%B0-MySQL-server-has-gone-away%2F</url>
    <content type="text"><![CDATA[问题&amp;场景在yii2的command，利用多进程消费数据库中的数据时，总是出现gone away。 分析在mysql的官方文档中其实有专门的章节说明这个问题，原因也是各种各样，详见；其中有一条刚好符合我的场景，大意就是，当fork的子进程都共用相同的mysql连接的时候，会出现该错误，每个子进程单独一个mysql连接即可解决。 You can also encounter this error with applications that fork child processes, all of which try to use the same connection to the MySQL server. This can be avoided by using a separate connection for each child process. 解决在子进程执行之前，先把mysql的连接close即可。 代码123456789101112131415for ($i = 0; $i &lt; $processNum; $i++) &#123; $pid = pcntl_fork(); if(!$pid)&#123; // 子进程处理 Yii::$app-&gt;db-&gt;close();// solve 子进程 MySQL server has gone away $this-&gt;_work($tasks[$i]); exit(0); &#125;&#125;Yii::$app-&gt;db-&gt;close();// solve 主进程 MySQL server has gone away$status = null;while(pcntl_waitpid(0, $status, WUNTRACED) != -1)&#123; pcntl_wexitstatus($status); CommonLog::saveLog('子进程结束'."\n");&#125;]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>yii2</tag>
        <tag>多进程</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[大学&emsp;&emsp;花名轻芒，是一个崇尚简单、喜爱编程、追求极致的人。大学时期利用业余时间主要在学习lnmp相关技术，开发过几个网站，拿过几个证书，也从此踏上了程序员之路 工作&emsp;&emsp;目前就职于高德地图，各种打杂 技能&emsp;&emsp;对各种编程语言、各种系统都有兴趣，玩过PHP、Golang、Python等，略懂前端 联系&emsp;&emsp;欢迎指正博客中存在的各种问题，邮箱：1060687053@qq.com]]></content>
  </entry>
  <entry>
    <title><![CDATA[分类]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[标签]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
