<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轻芒的博客</title>
  <subtitle>爱编程、爱分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-05T12:24:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>轻芒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>58沈剑的《架构师之路》学习笔记</title>
    <link href="http://yoursite.com/2017/11/05/58%E6%B2%88%E5%89%91%E7%9A%84%E3%80%8A%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/05/58沈剑的《架构师之路》学习笔记/</id>
    <published>2017-11-05T08:59:37.000Z</published>
    <updated>2017-11-05T12:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>前端时间关注了58沈剑大牛的“架构师之路”的微信公众号，之前一直没时间认真拜读，现打算利用周末的时间学习一下，做一些笔记。本篇内容全部来自《架构师之路》，我只是在此摘抄记录一些知识点。感谢沈剑大牛的分享。</strong></p>
<h3 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h3><p>高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。</p>
<p>方法论上，高可用是通过冗余+自动故障转移来实现的。<br>整个互联网分层系统架构的高可用，又是通过每一层的冗余+自动故障转移来综合实现的，具体的：</p>
<ol>
<li>【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li>
<li>【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移</li>
<li>【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移</li>
<li>【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性</li>
<li>【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移</li>
<li>【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li>
</ol>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据【均匀】分摊到多个操作单元上执行，负载均衡的关键在于【均匀】。</p>
<ol>
<li>【客户端层】到【反向代理层】的负载均衡，是通过“DNS轮询”实现的</li>
<li>【反向代理层】到【站点层】的负载均衡，是通过“nginx”实现的</li>
<li>【站点层】到【服务层】的负载均衡，是通过“服务连接池”实现的</li>
<li>【数据层】的负载均衡，要考虑“数据的均衡”与“请求的均衡”两个点，常见的方式有“按照范围水平切分”与“hash水平切分”</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>数据库使用规范<ul>
<li>参见公众号里的文章《58到家数据库30条军规解读》</li>
</ul>
</li>
<li>分库<ol>
<li>hash取模：user_id%2=0为0库，user_id%2=1为1库。</li>
<li>数据分段：user_id属于[0, 1亿]为0库，属于[1亿, 2亿]为2库。</li>
<li>引入像mycat等数据库中间件</li>
</ol>
</li>
<li>保证数据的安全性是DBA第一要务，需要进行：<ol>
<li>全量备份+增量备份，并定期进行恢复演练，但该方案恢复时间较久，对系统可用性影响大</li>
<li>1小时延时从，双份1小时延时从能极大加速数据库恢复时间</li>
<li>个人建议1小时延时从足够，后台只读服务可以连1小时延时从，提高资源利用率</li>
</ol>
</li>
</ul>
<h3 id="线程数究竟设多少合理"><a href="#线程数究竟设多少合理" class="headerlink" title="线程数究竟设多少合理"></a>线程数究竟设多少合理</h3><ul>
<li>结论：N核服务器，通过执行业务的单线程分析出本地计算时间为x，等待时间为y，则工作线程数（线程池线程数）设置为 N*(x+y)/x，能让CPU的利用率最大化。</li>
<li>经验：一般来说，非CPU密集型的业务（加解密、压缩解压缩、搜索排序等业务是CPU密集型的业务），瓶颈都在后端数据库，本地CPU计算的时间很少，所以设置几十或者几百个工作线程也都是可能的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前端时间关注了58沈剑大牛的“架构师之路”的微信公众号，之前一直没时间认真拜读，现打算利用周末的时间学习一下，做一些笔记。本
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>nginx的rewrite配置</title>
    <link href="http://yoursite.com/2017/11/03/nginx%E7%9A%84rewrite%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/11/03/nginx的rewrite配置/</id>
    <published>2017-11-03T10:37:01.000Z</published>
    <updated>2017-11-03T12:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p>
<blockquote>
<ol>
<li><a href="https://segmentfault.com/a/1190000008102599" target="_blank" rel="external">https://segmentfault.com/a/1190000008102599</a></li>
<li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="external">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a></li>
</ol>
</blockquote>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前用yii2在框架层即可通过配置urlManager完成url的重写，最近一个纯php项目需要接入集团的单点登录，记录下<br>nginx的rewrite的相关知识。</p>
<h3 id="rewrite规则"><a href="#rewrite规则" class="headerlink" title="rewrite规则"></a>rewrite规则</h3><p>执行顺序：  </p>
<ol>
<li>server块的rewrite指令</li>
<li>location匹配</li>
<li>匹配的location里的rewrite</li>
</ol>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p>
<h3 id="location匹配"><a href="#location匹配" class="headerlink" title="location匹配"></a>location匹配</h3><ol>
<li>=开头表示精确匹配</li>
<li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配,任何请求都会匹配到</li>
</ol>
<h3 id="rewrite的flag标志位"><a href="#rewrite的flag标志位" class="headerlink" title="rewrite的flag标志位"></a>rewrite的flag标志位</h3><ol>
<li>last 停止处理当前的rewrite的指令集，并开始搜索与更改后的URI相匹配的location;</li>
<li>break 停止处理当前的rewite指令集</li>
<li>redirect 返回302临时重定向。</li>
<li>permanent 返回301永久重定向</li>
</ol>
<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen   9033;</div><div class="line">    server_name  xxx.com;</div><div class="line">    root /home/admin/project;</div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php$is_args$args;</div><div class="line">        autoindex on;</div><div class="line">        index  index.php index.html index.htm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ /\.(ht|svn|git) &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ^~ /static/images</div><div class="line">    &#123;</div><div class="line">      rewrite ^/static(.*)$ /dev/$1 last;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ^~ /mis</div><div class="line">    &#123;</div><div class="line">     root /home/admin/project;</div><div class="line">     fastcgi_pass  127.0.0.1:9001;</div><div class="line">     fastcgi_index index.php;</div><div class="line">     include fcgi.conf;</div><div class="line">     rewrite ^/mis(/[^\?]*)?((\?.*)?)$ /mis/index.php$1$2 break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008102599&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.c
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="rewrite" scheme="http://yoursite.com/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper伪分布式集群搭建</title>
    <link href="http://yoursite.com/2017/10/26/zookeeper%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/10/26/zookeeper伪分布式集群搭建/</id>
    <published>2017-10-26T11:32:09.000Z</published>
    <updated>2017-10-27T07:06:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://zh.wikipedia.org/wiki/Apache_ZooKeeper" target="_blank" rel="external">ZooKeeper</a>是一个分布式的，开放源码的分布式应用程序协调服务，<a href="https://zookeeper.apache.org/" target="_blank" rel="external">参见官网</a>。典型应用场景，如目录服务、配置管理、同步、集群节点选举、消息队列、通知系统等。本文演示搭建一个单机三个实例的伪分布集群。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>下载并解压zookeeper。创建三个目录，分别为这三个实例的目录环境，并在三个目录中创建内容分别为1，2，3的名称为myid文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$tree zoo1/ zoo2/ zoo3</div><div class="line">zoo1/</div><div class="line">└── myid</div><div class="line">zoo2/</div><div class="line">└── myid</div><div class="line">zoo3</div><div class="line">└── myid</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在zookeeper的配置目录下，分别创建三个名为zoo1.cfg、zoo2.cfg、zoo3.cfg的配置文件。<br>以server.1=10.101.80.35:9110:9210为例，1为对应实例myid内容编号，10.101.80.35为ip，9110为Leader选举的端口，9210为zookeeper实例之间通信的端口，因搭建的伪分布式集群，所以端口各不相同，真实的分布式集群，三个实例的端口通常相同。</p>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">zoo1.cfg</div><div class="line"></div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/home/admin/zookeeper/zoo1</div><div class="line">clientPort=2181</div><div class="line">server.1=10.101.80.35:9110:9210</div><div class="line">server.2=10.101.80.35:9111:9211</div><div class="line">server.3=10.101.80.35:9112:9212</div><div class="line"></div><div class="line">zoo2.cfg</div><div class="line"></div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/home/admin/zookeeper/zoo2</div><div class="line">clientPort=2182</div><div class="line">server.1=10.101.80.35:9110:9210</div><div class="line">server.2=10.101.80.35:9111:9211</div><div class="line">server.3=10.101.80.35:9112:9212</div><div class="line"></div><div class="line">zoo3.cfg</div><div class="line"></div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/home/admin/zookeeper/zoo3</div><div class="line">clientPort=2183</div><div class="line">server.1=10.101.80.35:9110:9210</div><div class="line">server.2=10.101.80.35:9111:9211</div><div class="line">server.3=10.101.80.35:9112:9212</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cd  /home/admin/zookeeper/zookeeper-3.4.10</div><div class="line"></div><div class="line">./bin/zkServer.sh  start ./conf/zoo1.cfg</div><div class="line">./bin/zkServer.sh  start ./conf/zoo2.cfg</div><div class="line">./bin/zkServer.sh  start ./conf/zoo3.cfg</div><div class="line"></div><div class="line">#查看状态</div><div class="line">$./bin/zkServer.sh  status ./conf/zoo1.cfg</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: ./conf/zoo1.cfg</div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#进入集群</div><div class="line">./bin/zkCli.sh -server 10.101.80.35:2182</div><div class="line"></div><div class="line">#创建节点</div><div class="line">[zk: 10.101.80.35:2182(CONNECTED) 3] create /mynode test</div><div class="line">Created /mynode</div><div class="line">[zk: 10.101.80.35:2182(CONNECTED) 4] ls /</div><div class="line">[mynode, zookeeper]</div><div class="line"></div><div class="line">#查看所有节点</div><div class="line">[zk: 10.101.80.35:2182(CONNECTED) 7] ls /</div><div class="line">[mynode, zookeeper]</div><div class="line"></div><div class="line">#查看指定节点</div><div class="line">[zk: 10.101.80.35:2182(CONNECTED) 5] get /mynode</div><div class="line">test</div><div class="line">cZxid = 0x100000004</div><div class="line">ctime = Thu Oct 26 20:38:29 CST 2017</div><div class="line">mZxid = 0x100000004</div><div class="line">mtime = Thu Oct 26 20:38:29 CST 2017</div><div class="line">pZxid = 0x100000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 0</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 4</div><div class="line">numChildren = 0</div><div class="line"></div><div class="line">#更新节点内容</div><div class="line">[zk: 10.101.80.35:2182(CONNECTED) 8] set /mynode haha</div><div class="line">cZxid = 0x100000004</div><div class="line">ctime = Thu Oct 26 20:38:29 CST 2017</div><div class="line">mZxid = 0x100000005</div><div class="line">mtime = Thu Oct 26 20:43:40 CST 2017</div><div class="line">pZxid = 0x100000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 1</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 4</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache_ZooKeeper&quot; target=&quot;_blan
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>yii2 php多进程 出现 MySQL server has gone away</title>
    <link href="http://yoursite.com/2017/08/09/yii2-php%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%87%BA%E7%8E%B0-MySQL-server-has-gone-away/"/>
    <id>http://yoursite.com/2017/08/09/yii2-php多进程-出现-MySQL-server-has-gone-away/</id>
    <published>2017-08-09T06:47:40.000Z</published>
    <updated>2017-10-26T11:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题-amp-场景"><a href="#问题-amp-场景" class="headerlink" title="问题&amp;场景"></a>问题&amp;场景</h3><p>在yii2的command，利用多进程消费数据库中的数据时，总是出现gone away。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在mysql的官方文档中其实有专门的章节说明这个问题，原因也是各种各样，<a href="https://dev.mysql.com/doc/refman/5.7/en/gone-away.html" target="_blank" rel="external">详见</a>；<br>其中有一条刚好符合我的场景，大意就是，当fork的子进程都共用相同的mysql连接的时候，会出现该错误，每个子进程单独一个mysql连接即可解决。</p>
<blockquote>
<p>You can also encounter this error with applications that fork child processes, all of which try to use the same connection to the MySQL server. This can be avoided by using a separate connection for each child process.</p>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在子进程执行之前，先把mysql的连接close即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $processNum; $i++) &#123;</div><div class="line">    $pid = pcntl_fork();</div><div class="line">    <span class="keyword">if</span>(!$pid)&#123; <span class="comment">// 子进程处理</span></div><div class="line">        Yii::$app-&gt;db-&gt;close();<span class="comment">// solve 子进程 MySQL server has gone away</span></div><div class="line">        <span class="keyword">$this</span>-&gt;_work($tasks[$i]);</div><div class="line">        <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Yii::$app-&gt;db-&gt;close();<span class="comment">// solve 主进程 MySQL server has gone away</span></div><div class="line"></div><div class="line">$status = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">while</span>(pcntl_waitpid(<span class="number">0</span>, $status, WUNTRACED) != <span class="number">-1</span>)&#123;</div><div class="line">    pcntl_wexitstatus($status);</div><div class="line">    CommonLog::saveLog(<span class="string">'子进程结束'</span>.<span class="string">"\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题-amp-场景&quot;&gt;&lt;a href=&quot;#问题-amp-场景&quot; class=&quot;headerlink&quot; title=&quot;问题&amp;amp;场景&quot;&gt;&lt;/a&gt;问题&amp;amp;场景&lt;/h3&gt;&lt;p&gt;在yii2的command，利用多进程消费数据库中的数据时，总是出现gone awa
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
      <category term="多进程" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>
