<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轻芒的博客</title>
  
  <subtitle>爱编程、爱分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-10T11:24:23.753Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>轻芒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue.js异步更新队列</title>
    <link href="http://yoursite.com/2017/12/10/vue-js%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2017/12/10/vue-js异步更新队列/</id>
    <published>2017-12-10T11:12:14.000Z</published>
    <updated>2017-12-10T11:24:23.753Z</updated>
    
    <content type="html"><![CDATA[<p>在做项目的时候，发现需要在更新数据之后，组件不会立马被渲染。而我们的需求是需要在组件数据发生变化后，等待dom更新，然后再次更新组件的状态。认真的扒了扒官方文档，其实官方给出了解决方案，具体就是通过nextTick来实现。<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="external">官方文档</a></p><h3 id="场景-amp-实现"><a href="#场景-amp-实现" class="headerlink" title="场景&amp;实现"></a>场景&amp;实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">   export default &#123;</span></span><br><span class="line"><span class="regexp">        watch: &#123;</span></span><br><span class="line"><span class="regexp">            dataChange: function (updateRes) &#123;</span></span><br><span class="line"><span class="regexp">            this.doSomethingAfterDomUpdate();</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123;</span></span><br><span class="line"><span class="regexp">        doSomethingAfterDomUpdate:function () &#123;</span></span><br><span class="line"><span class="regexp">                this.$nextTick(function () &#123;</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/ do something</span></span><br><span class="line"><span class="regexp">                &#125;)</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做项目的时候，发现需要在更新数据之后，组件不会立马被渲染。而我们的需求是需要在组件数据发生变化后，等待dom更新，然后再次更新组件的状态。认真的扒了扒官方文档，其实官方给出了解决方案，具体就是通过nextTick来实现。&lt;a href=&quot;https://cn.vuejs.
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>语录</title>
    <link href="http://yoursite.com/2017/12/09/%E8%AF%AD%E5%BD%95/"/>
    <id>http://yoursite.com/2017/12/09/语录/</id>
    <published>2017-12-09T07:12:43.000Z</published>
    <updated>2017-12-09T07:43:04.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="猎豹傅盛"><a href="#猎豹傅盛" class="headerlink" title="猎豹傅盛"></a>猎豹傅盛</h3><ul><li>人的根本差别在于认知，没有行动的认知是伪认知。所谓的成长就是认知的升级。</li><li>管理三段论–目标、路径、资源。找到一个目标，想清楚路径，再投入资源。前提是有判断力。</li><li>领导力核心是在大格局下对整个行业的认知体系，用大趋势做出正确的判断和聪明的决策</li></ul><h3 id="刘强东"><a href="#刘强东" class="headerlink" title="刘强东"></a>刘强东</h3><ul><li>所有的失败，最终都是人的失败</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;猎豹傅盛&quot;&gt;&lt;a href=&quot;#猎豹傅盛&quot; class=&quot;headerlink&quot; title=&quot;猎豹傅盛&quot;&gt;&lt;/a&gt;猎豹傅盛&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人的根本差别在于认知，没有行动的认知是伪认知。所谓的成长就是认知的升级。&lt;/li&gt;
&lt;li&gt;管理三段论–目标、路
      
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="语录" scheme="http://yoursite.com/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>vue.js非父子组件通信</title>
    <link href="http://yoursite.com/2017/12/08/vue-js%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/12/08/vue-js非父子组件通信/</id>
    <published>2017-12-08T08:42:50.000Z</published>
    <updated>2017-12-10T11:31:36.931Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇已经写了父子组件通信的具体实践，但在时间开发中，非父子组件间的通信相对较为复杂。常见的解决方案：</p><ol><li>是通过new一个空的Vue实例，来作为事件总线，这种方式对于大部分的情况都是可以解决的。</li><li>如果需要更为复杂的状态管理，这个时候引入vuex来实现，更为方便快捷</li></ol><h3 id="空Vue实例实现"><a href="#空Vue实例实现" class="headerlink" title="空Vue实例实现"></a>空Vue实例实现</h3><p>brother1通过按钮触发事件，向brother2发送数据；</p><p>父组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;brother1&gt;&lt;/</span>brother1&gt;</span><br><span class="line">        &lt;brother2&gt;&lt;/brother2&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> brother1 <span class="keyword">from</span> <span class="string">'./brother1.vue'</span>;</span><br><span class="line">    <span class="keyword">import</span> brother2 <span class="keyword">from</span> <span class="string">'./brother2.vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">        brother1,</span><br><span class="line">        brother2,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>brother1组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">       &lt;button @click="sengDataToBrother"&gt;sengDataToBrother&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'./eventBus'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg: <span class="string">'i am brother1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sengDataToBrother:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                bus.$emit(<span class="string">'busEvent'</span>,<span class="keyword">this</span>.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>brother2组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        color:red;</span><br><span class="line">        font-size:<span class="number">20</span>px;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">        min-height: <span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        brother2 receive: &#123;&#123;receiveData&#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import bus from './</span>eventBus<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        data:function () &#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              receiveData:'</span><span class="string">',</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        mounted:function () &#123;</span></span><br><span class="line"><span class="string">            bus.$on('</span>busEvent<span class="string">', sendData=&gt;&#123;</span></span><br><span class="line"><span class="string">                this.receiveData = sendData;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vuex实现"><a href="#vuex实现" class="headerlink" title="vuex实现"></a>vuex实现</h3><p>brother1通过按钮触发事件，向brother2发送数据；</p><p>安装vuex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>vuex 配置 vuexStore.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vuexStore = &#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        brother1Data:&#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        sendDataEvent(state, objData)&#123;</span><br><span class="line">            state.brother1Data[objData.title] = objData.msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        brother1Data: <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.brother1Data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vuexStore;</span><br></pre></td></tr></table></figure><p>入口文件引入vuex及配置 main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> VuexStore <span class="keyword">from</span> <span class="string">'./vuexStore'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(VuexStore);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    store:store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>父组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;brother1&gt;&lt;/</span>brother1&gt;</span><br><span class="line">        &lt;brother2&gt;&lt;/brother2&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> brother1 <span class="keyword">from</span> <span class="string">'./brother1.vue'</span>;</span><br><span class="line">    <span class="keyword">import</span> brother2 <span class="keyword">from</span> <span class="string">'./brother2.vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">            brother1,</span><br><span class="line">            brother2,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>brother1代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">       &lt;button @click="sengDataToBrother"&gt;sengDataToBrother&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg: <span class="string">'i am brother1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sengDataToBrother:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.$store.commit(<span class="string">'sendDataEvent'</span>, &#123;<span class="attr">title</span>:<span class="string">'brother1'</span>, <span class="attr">msg</span>:<span class="keyword">this</span>.msg&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>brother2代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        color:red;</span><br><span class="line">        font-size:<span class="number">20</span>px;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">        min-height: <span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="dataShow"&gt;dataShow&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        computed:&#123;</span><br><span class="line">            receiveData()&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.brother1Data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            dataShow:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.receiveData)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇已经写了父子组件通信的具体实践，但在时间开发中，非父子组件间的通信相对较为复杂。常见的解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是通过new一个空的Vue实例，来作为事件总线，这种方式对于大部分的情况都是可以解决的。&lt;/li&gt;
&lt;li&gt;如果需要更为复杂的状态管理，这个时候
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue.js父子组件通信</title>
    <link href="http://yoursite.com/2017/12/08/vue-js%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/12/08/vue-js父子组件通信/</id>
    <published>2017-12-08T08:17:41.000Z</published>
    <updated>2017-12-10T11:31:03.670Z</updated>
    
    <content type="html"><![CDATA[<p>父组件向子组件传递数据，是通过prop来实现；子组件向父组件传递数据，通过$emit来实现；下面实例是父子组件通信，在单文件组件中的实现</p><h3 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h3><p>父组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        color:blue;</span><br><span class="line">        font-size:<span class="number">40</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;child :msg="msg"&gt;&lt;/</span>child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'./child.vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">            child,</span><br><span class="line">        &#125;,</span><br><span class="line">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg:<span class="string">'hello world'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">    .myclass&#123;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="myclass"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span style="color: red;"&gt;&#123;&#123;msg&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        props:[<span class="string">'msg'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h3><p>父组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        color:blue;</span><br><span class="line">        font-size:<span class="number">40</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;child @listenToChildEvent="childEvent"&gt;&lt;/</span>child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'./child.vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">            child,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            childEvent:<span class="function"><span class="keyword">function</span> (<span class="params">childData</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(childData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">       &lt;button @click="sengDataToParent"&gt;sendDataToParent&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                childData: <span class="string">'i am child'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sengDataToParent:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'listenToChildEvent'</span>, <span class="keyword">this</span>.childData)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;父组件向子组件传递数据，是通过prop来实现；子组件向父组件传递数据，通过$emit来实现；下面实例是父子组件通信，在单文件组件中的实现&lt;/p&gt;
&lt;h3 id=&quot;父组件向子组件传递数据&quot;&gt;&lt;a href=&quot;#父组件向子组件传递数据&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Golang并行编程实践</title>
    <link href="http://yoursite.com/2017/11/27/Golang%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/11/27/Golang并行编程实践/</id>
    <published>2017-11-27T12:34:22.000Z</published>
    <updated>2017-11-27T14:01:26.049Z</updated>
    
    <content type="html"><![CDATA[<p>Golang天然支持并行编程并且很轻量，利用goroutine和channel，可以很容易的开发出并行程序</p><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>协程之间的通信，官方推荐是channel来实现的。在这里只说下，channel缓冲和无缓冲的区别</p><ul><li>无缓冲：当向无缓冲的通道中写数据的时候，必须等到该数据被取出之后，才能再次写入</li><li>有缓冲：当向有缓冲的通道中写入数据的时候，除非当通道中数据量已经满了，否则可以一直写入；当通道数据满了之后，必须等到通道中的数据被消耗，才能再次向通道中写入数据</li></ul><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><p>假设现在我们需要同时处理若干任务，处理完成之后，再将结果汇总返回，比较注重任务的处理结果，代码实现如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResData <span class="keyword">struct</span> &#123;</span><br><span class="line">Status <span class="keyword">int</span></span><br><span class="line">Msg    <span class="keyword">string</span></span><br><span class="line">TaskId <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">mapTasks := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"任务1"</span>, <span class="number">2</span>: <span class="string">"任务2"</span>, <span class="number">3</span>: <span class="string">"任务3"</span>, <span class="number">4</span>: <span class="string">"任务4"</span>, <span class="number">5</span>: <span class="string">"任务5"</span>, <span class="number">6</span>: <span class="string">"任务6"</span>, <span class="number">7</span>: <span class="string">"任务7"</span>, <span class="number">8</span>: <span class="string">"任务8"</span>&#125;</span><br><span class="line"></span><br><span class="line">taskNums := <span class="built_in">len</span>(mapTasks) <span class="comment">// 任务数量</span></span><br><span class="line">chanTask := <span class="built_in">make</span>(<span class="keyword">chan</span> ResData, taskNums) <span class="comment">// 新建缓冲数为任务量的通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> taskId, task := <span class="keyword">range</span> mapTasks &#123;</span><br><span class="line"><span class="keyword">go</span> taskWorker(taskId, task, chanTask) <span class="comment">// 利用goroutine起并行任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= taskNums; i++ &#123; <span class="comment">// 等待任务处理结果</span></span><br><span class="line">resTask := &lt;-chanTask</span><br><span class="line">log.Printf(<span class="string">"%+v"</span>, resTask)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resTask.Status != <span class="number">1</span> &#123;</span><br><span class="line">log.Println(resTask.Msg + <span class="string">"处理失败"</span>)</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Println(resTask.Msg + <span class="string">"咦~~~~, 处理成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">taskWorker</span><span class="params">(taskId <span class="keyword">int</span>, task <span class="keyword">string</span>, chanTask <span class="keyword">chan</span>&lt;- ResData)</span></span> &#123;</span><br><span class="line"><span class="comment">// 模拟处理任务，并产生一个随机结果</span></span><br><span class="line">log.Println(<span class="string">"开始处理任务："</span>, task)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">res := rand.Intn(<span class="number">2</span>)</span><br><span class="line">log.Println(<span class="string">"任务："</span>, task, <span class="string">"处理完成"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res == <span class="number">1</span> &#123;<span class="comment">// 处理成功</span></span><br><span class="line">chanTask &lt;- ResData&#123;Status: <span class="number">1</span>, Msg: <span class="string">"success"</span>, TaskId: taskId&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">chanTask &lt;- ResData&#123;Status: <span class="number">0</span>, Msg: <span class="string">"fail"</span>, TaskId: taskId&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><p>假设我们现在需要并行处理一些任务，但是并不是非常关心任务的处理结果，我们可以使用waitGroup来实现一种简单粗暴的并行处理, 代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">arrTasks := []<span class="keyword">string</span>&#123;<span class="string">"任务1"</span>, <span class="string">"任务2"</span>, <span class="string">"任务3"</span>, <span class="string">"任务4"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, task := <span class="keyword">range</span> arrTasks &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(task <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">go</span> taskWorker1(task)</span><br><span class="line">&#125;(task)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait() <span class="comment">// 等待所有任务结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">taskWorker1</span><span class="params">(task <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Golang天然支持并行编程并且很轻量，利用goroutine和channel，可以很容易的开发出并行程序&lt;/p&gt;
&lt;h3 id=&quot;Channel&quot;&gt;&lt;a href=&quot;#Channel&quot; class=&quot;headerlink&quot; title=&quot;Channel&quot;&gt;&lt;/a&gt;Chan
      
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="并行" scheme="http://yoursite.com/tags/%E5%B9%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>58沈剑的《架构师之路》学习笔记</title>
    <link href="http://yoursite.com/2017/11/05/58%E6%B2%88%E5%89%91%E7%9A%84%E3%80%8A%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/05/58沈剑的《架构师之路》学习笔记/</id>
    <published>2017-11-05T08:59:37.000Z</published>
    <updated>2017-11-07T07:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前段时间关注了58沈剑大牛的“架构师之路”的微信公众号，之前一直没时间认真拜读，现打算利用周末的时间学习一下，做一些笔记。本篇内容全部来自《架构师之路》，我只是在此摘抄记录一些知识点。感谢沈剑大牛的分享。</strong></p><h3 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h3><p>高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。</p><p>方法论上，高可用是通过冗余+自动故障转移来实现的。<br>整个互联网分层系统架构的高可用，又是通过每一层的冗余+自动故障转移来综合实现的，具体的：</p><ol><li>【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li><li>【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移</li><li>【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移</li><li>【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性</li><li>【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移</li><li>【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li></ol><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据【均匀】分摊到多个操作单元上执行，负载均衡的关键在于【均匀】。</p><ol><li>【客户端层】到【反向代理层】的负载均衡，是通过“DNS轮询”实现的</li><li>【反向代理层】到【站点层】的负载均衡，是通过“nginx”实现的</li><li>【站点层】到【服务层】的负载均衡，是通过“服务连接池”实现的</li><li>【数据层】的负载均衡，要考虑“数据的均衡”与“请求的均衡”两个点，常见的方式有“按照范围水平切分”与“hash水平切分”</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>数据库使用规范<ul><li>参见公众号里的文章《58到家数据库30条军规解读》</li></ul></li><li>分库<ol><li>hash取模：user_id%2=0为0库，user_id%2=1为1库。</li><li>数据分段：user_id属于[0, 1亿]为0库，属于[1亿, 2亿]为2库。</li><li>引入像mycat等数据库中间件</li></ol></li><li>保证数据的安全性是DBA第一要务，需要进行：<ol><li>全量备份+增量备份，并定期进行恢复演练，但该方案恢复时间较久，对系统可用性影响大</li><li>1小时延时从，双份1小时延时从能极大加速数据库恢复时间</li><li>个人建议1小时延时从足够，后台只读服务可以连1小时延时从，提高资源利用率</li></ol></li></ul><h3 id="线程数究竟设多少合理"><a href="#线程数究竟设多少合理" class="headerlink" title="线程数究竟设多少合理"></a>线程数究竟设多少合理</h3><ul><li>结论：N核服务器，通过执行业务的单线程分析出本地计算时间为x，等待时间为y，则工作线程数（线程池线程数）设置为 N*(x+y)/x，能让CPU的利用率最大化。</li><li>经验：一般来说，非CPU密集型的业务（加解密、压缩解压缩、搜索排序等业务是CPU密集型的业务），瓶颈都在后端数据库，本地CPU计算的时间很少，所以设置几十或者几百个工作线程也都是可能的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前段时间关注了58沈剑大牛的“架构师之路”的微信公众号，之前一直没时间认真拜读，现打算利用周末的时间学习一下，做一些笔记。本篇内容全部来自《架构师之路》，我只是在此摘抄记录一些知识点。感谢沈剑大牛的分享。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;高可用架构
      
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的rewrite配置</title>
    <link href="http://yoursite.com/2017/11/03/Nginx%E7%9A%84rewrite%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/11/03/Nginx的rewrite配置/</id>
    <published>2017-11-03T10:37:01.000Z</published>
    <updated>2017-11-07T07:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前用yii2在框架层即可通过配置urlManager完成url的重写，最近一个纯php项目需要接入集团的单点登录，记录下<br>nginx的rewrite的相关知识。</p><h3 id="rewrite规则"><a href="#rewrite规则" class="headerlink" title="rewrite规则"></a>rewrite规则</h3><p>执行顺序：  </p><ol><li>server块的rewrite指令</li><li>location匹配</li><li>匹配的location里的rewrite</li></ol><p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p><h3 id="location匹配"><a href="#location匹配" class="headerlink" title="location匹配"></a>location匹配</h3><ol><li>= 开头表示精确匹配</li><li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li><li>~ 开头表示区分大小写的正则匹配;</li><li>~* 开头表示不区分大小写的正则匹配</li><li>/ 通用匹配, 任何请求都会匹配到</li></ol><h3 id="rewrite的flag标志位"><a href="#rewrite的flag标志位" class="headerlink" title="rewrite的flag标志位"></a>rewrite的flag标志位</h3><ol><li>last 停止处理当前的rewrite的指令集，并开始搜索与更改后的URI相匹配的location;</li><li>break 停止处理当前的rewite指令集</li><li>redirect 返回302临时重定向。</li><li>permanent 返回301永久重定向</li></ol><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   9033;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    root /home/admin/project;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">        autoindex on;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.(ht|svn|git) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /static/images</span><br><span class="line">    &#123;</span><br><span class="line">      rewrite ^/static(.*)$ /dev/$1 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /mis</span><br><span class="line">    &#123;</span><br><span class="line">     root /home/admin/project;</span><br><span class="line">     fastcgi_pass  127.0.0.1:9001;</span><br><span class="line">     fastcgi_index index.php;</span><br><span class="line">     include fcgi.conf;</span><br><span class="line">     rewrite ^/mis(/[^\?]*)?((\?.*)?)$ /mis/index.php$1$2 break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前用yii2在框架层即可通过配置urlManager完成url的重写，最近一个纯php项目需要接入集团的单点登录，记录下&lt;br&gt;nginx的rewrite的相关知识。&lt;/p&gt;
&lt;h3 id=&quot;rewrite规则&quot;&gt;&lt;a href=&quot;#rewrite规则&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="rewrite" scheme="http://yoursite.com/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper伪分布式集群搭建</title>
    <link href="http://yoursite.com/2017/10/26/ZooKeeper%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/10/26/ZooKeeper伪分布式集群搭建/</id>
    <published>2017-10-26T11:32:09.000Z</published>
    <updated>2017-11-13T10:37:05.389Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/Apache_ZooKeeper" target="_blank" rel="external">ZooKeeper</a>是一个分布式的，开放源码的分布式应用程序协调服务，<a href="https://zookeeper.apache.org/" target="_blank" rel="external">参见官网</a>。典型应用场景，如目录服务、配置管理、同步、集群节点选举、消息队列、通知系统等。本文演示搭建一个单机三个实例的伪分布集群。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>下载并解压zookeeper。创建三个目录，分别为这三个实例的目录环境，并在三个目录中创建内容分别为1，2，3的名称为myid文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$tree zoo1/ zoo2/ zoo3</span><br><span class="line">zoo1/</span><br><span class="line">└── myid</span><br><span class="line">zoo2/</span><br><span class="line">└── myid</span><br><span class="line">zoo3</span><br><span class="line">└── myid</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在zookeeper的配置目录下，分别创建三个名为zoo1.cfg、zoo2.cfg、zoo3.cfg的配置文件。<br>以server.1=10.101.80.35:9110:9210为例，1为对应实例myid内容编号，10.101.80.35为ip，9110为Leader选举的端口，9210为zookeeper实例之间通信的端口，因搭建的伪分布式集群，所以端口各不相同，真实的分布式集群，三个实例的端口通常相同。</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">zoo1.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/admin/zookeeper/zoo1</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=10.101.80.35:9110:9210</span><br><span class="line">server.2=10.101.80.35:9111:9211</span><br><span class="line">server.3=10.101.80.35:9112:9212</span><br><span class="line"></span><br><span class="line">zoo2.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/admin/zookeeper/zoo2</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1=10.101.80.35:9110:9210</span><br><span class="line">server.2=10.101.80.35:9111:9211</span><br><span class="line">server.3=10.101.80.35:9112:9212</span><br><span class="line"></span><br><span class="line">zoo3.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/admin/zookeeper/zoo3</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1=10.101.80.35:9110:9210</span><br><span class="line">server.2=10.101.80.35:9111:9211</span><br><span class="line">server.3=10.101.80.35:9112:9212</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd  /home/admin/zookeeper/zookeeper-3.4.10</span><br><span class="line"></span><br><span class="line">./bin/zkServer.sh  start ./conf/zoo1.cfg</span><br><span class="line">./bin/zkServer.sh  start ./conf/zoo2.cfg</span><br><span class="line">./bin/zkServer.sh  start ./conf/zoo3.cfg</span><br><span class="line"></span><br><span class="line">#查看状态</span><br><span class="line">$./bin/zkServer.sh  status ./conf/zoo1.cfg</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: ./conf/zoo1.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#进入集群</span><br><span class="line">./bin/zkCli.sh -server 10.101.80.35:2182</span><br><span class="line"></span><br><span class="line">#创建节点</span><br><span class="line">[zk: 10.101.80.35:2182(CONNECTED) 3] create /mynode test</span><br><span class="line">Created /mynode</span><br><span class="line">[zk: 10.101.80.35:2182(CONNECTED) 4] ls /</span><br><span class="line">[mynode, zookeeper]</span><br><span class="line"></span><br><span class="line">#查看所有节点</span><br><span class="line">[zk: 10.101.80.35:2182(CONNECTED) 7] ls /</span><br><span class="line">[mynode, zookeeper]</span><br><span class="line"></span><br><span class="line">#查看指定节点</span><br><span class="line">[zk: 10.101.80.35:2182(CONNECTED) 5] get /mynode</span><br><span class="line">test</span><br><span class="line">cZxid = 0x100000004</span><br><span class="line">ctime = Thu Oct 26 20:38:29 CST 2017</span><br><span class="line">mZxid = 0x100000004</span><br><span class="line">mtime = Thu Oct 26 20:38:29 CST 2017</span><br><span class="line">pZxid = 0x100000004</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">#更新节点内容</span><br><span class="line">[zk: 10.101.80.35:2182(CONNECTED) 8] set /mynode haha</span><br><span class="line">cZxid = 0x100000004</span><br><span class="line">ctime = Thu Oct 26 20:38:29 CST 2017</span><br><span class="line">mZxid = 0x100000005</span><br><span class="line">mtime = Thu Oct 26 20:43:40 CST 2017</span><br><span class="line">pZxid = 0x100000004</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache_ZooKeeper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZooKeeper&lt;/a&gt;是一个分布式的，开放源码的分布式应用程序协调服务，&lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="分布式" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>yii2 php多进程出现MySQL server has gone away</title>
    <link href="http://yoursite.com/2017/08/09/Yii2-PHP%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%87%BA%E7%8E%B0MySQL-server-has-gone-away/"/>
    <id>http://yoursite.com/2017/08/09/Yii2-PHP多进程出现MySQL-server-has-gone-away/</id>
    <published>2017-08-09T06:47:40.000Z</published>
    <updated>2017-11-13T10:36:23.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题-amp-场景"><a href="#问题-amp-场景" class="headerlink" title="问题&amp;场景"></a>问题&amp;场景</h3><p>在yii2的command，利用多进程消费数据库中的数据时，总是出现gone away。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在mysql的官方文档中其实有专门的章节说明这个问题，原因也是各种各样，<a href="https://dev.mysql.com/doc/refman/5.7/en/gone-away.html" target="_blank" rel="external">详见</a>；<br>其中有一条刚好符合我的场景，大意就是，当fork的子进程都共用相同的mysql连接的时候，会出现该错误，每个子进程单独一个mysql连接即可解决。</p><blockquote><p>You can also encounter this error with applications that fork child processes, all of which try to use the same connection to the MySQL server. This can be avoided by using a separate connection for each child process.</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在子进程执行之前，先把mysql的连接close即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $processNum; $i++) &#123;</span><br><span class="line">    $pid = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span>(!$pid)&#123; <span class="comment">// 子进程处理</span></span><br><span class="line">        Yii::$app-&gt;db-&gt;close();<span class="comment">// solve 子进程 MySQL server has gone away</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_work($tasks[$i]);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Yii::$app-&gt;db-&gt;close();<span class="comment">// solve 主进程 MySQL server has gone away</span></span><br><span class="line"></span><br><span class="line">$status = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(pcntl_waitpid(<span class="number">0</span>, $status, WUNTRACED) != <span class="number">-1</span>)&#123;</span><br><span class="line">    pcntl_wexitstatus($status);</span><br><span class="line">    CommonLog::saveLog(<span class="string">'子进程结束'</span>.<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题-amp-场景&quot;&gt;&lt;a href=&quot;#问题-amp-场景&quot; class=&quot;headerlink&quot; title=&quot;问题&amp;amp;场景&quot;&gt;&lt;/a&gt;问题&amp;amp;场景&lt;/h3&gt;&lt;p&gt;在yii2的command，利用多进程消费数据库中的数据时，总是出现gone awa
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="多进程" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://yoursite.com/tags/Yii2/"/>
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式基础</title>
    <link href="http://yoursite.com/2016/08/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/08/06/正则表达式基础/</id>
    <published>2016-08-06T11:00:25.000Z</published>
    <updated>2017-11-07T07:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="http://www.xiaoleilu.com/regex-guide/" target="_blank" rel="external">正则表达式简明参考</a></p><p><a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="external">PHP手册 模式修饰符</a></p><p><a href="http://deerchao.net/tutorials/regex/regex.htm#mission" target="_blank" rel="external">正则表达式30分钟入门教程</a></p></blockquote><p><em>正则表达式在处理字符串以及一些软件配置的时候都非常有用，但隔段时间不用，就生疏了。今天抽空回顾和整理了下正则的基础知识，以便以后回顾。</em></p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>常见的元字符:</p><table><thead><tr><th>元字符</th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td><td></td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td><td></td></tr><tr><td>*</td><td>匹配前面的表达式零次或多次</td><td></td></tr><tr><td>{n}; {n,}; {n,m}</td><td>匹配n次; 至少匹配n次; 至少匹配n次，最多匹配m次;</td><td></td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’</td><td></td></tr><tr><td>\W</td><td>匹配非字母、非数字、非下划线。等价于’[^A-Za-z0-9_]’</td><td>反义</td></tr><tr><td>\s</td><td>匹配任意的空白符</td><td></td></tr><tr><td>\S</td><td>匹配任意的非空白符</td><td>反义</td></tr><tr><td>\d</td><td>匹配数字</td><td></td></tr><tr><td>\D</td><td>匹配非数字</td><td>反义</td></tr><tr><td>\b</td><td>匹配单词边界</td><td></td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>反义</td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>[^abc]匹配除abc以外的任意字符，此为反义</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td></td></tr></tbody></table><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>想要在正则中用元字符本身，则可以通过\进行转义。\本身可通过\来转义</p><h3 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h3><p>表达式|表达式，从左到右满足第一个表达式则不在匹配。</p><h3 id="分组-amp-反向引用"><a href="#分组-amp-反向引用" class="headerlink" title="分组&amp;反向引用"></a>分组&amp;反向引用</h3><p>\b(\w+)\b\s+\1\b 用来匹配重复的单词，\1就是分组1，括号里面捕获的内容。</p><h3 id="零宽断言（正向和负向）"><a href="#零宽断言（正向和负向）" class="headerlink" title="零宽断言（正向和负向）"></a>零宽断言（正向和负向）</h3><p>零宽断言表示匹配字符的时候再添加一些定位条件，使匹配更精准。</p><ul><li>\w+(?=ing) 匹配以ing结尾的多个字符（不包括ing）</li><li>\w+(?!ing) 匹配不是以ing结尾的多个字符</li><li>(?&lt;=re)\w+ 匹配以re开头的多个字符（不包括re）</li><li>(?&lt;!re)\w+ 匹配不是以re开头的多个字符</li><li>(?&lt;=\s)\d+(?=\s) 匹配两边是空白符的数字，不包括空白符</li></ul><h3 id="贪婪-amp-懒惰"><a href="#贪婪-amp-懒惰" class="headerlink" title="贪婪&amp;懒惰"></a>贪婪&amp;懒惰</h3><p>小例子：<br>字符串： AxxByyAxxB<br>A.<em>B ：匹配到AxxByyAxxB<br>A.</em>?B ：匹配到AxxB</p><ul><li>贪婪 {m,n}、{m,}、?、*、+</li><li>懒惰 {m,n}?、{m,}?、??、*?、+?， 尽可能少的匹配</li></ul><h3 id="模式修饰符"><a href="#模式修饰符" class="headerlink" title="模式修饰符"></a>模式修饰符</h3><p>详见：<a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="external">http://php.net/manual/zh/reference.pcre.pattern.modifiers.php</a></p><ul><li>i：忽略大小写(CASE_INSENSITIVE)</li><li>x：忽略空格字符(COMMENTS)</li><li>s：.匹配任意字符，包括换行符（DOTALL）</li><li>m：多行模式（MULTILINE）</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释语法：(?#comment)，这个语法的内容会被正则忽略，用于注释含义。可以放在正则表达式的任意位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xiaoleilu.com/regex-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则表达式简明参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于编程</title>
    <link href="http://yoursite.com/2016/08/05/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/08/05/关于编程/</id>
    <published>2016-08-05T07:21:09.000Z</published>
    <updated>2017-11-27T14:13:18.226Z</updated>
    
    <content type="html"><![CDATA[<ul><li>看别人的代码，是一种非常有效的学习方式之一，可以扩展自己的思路</li><li>善于观察、乐于解决问题、善于总结</li><li>搞技术，切忌浮躁，踏实认真沉淀自己</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;看别人的代码，是一种非常有效的学习方式之一，可以扩展自己的思路&lt;/li&gt;
&lt;li&gt;善于观察、乐于解决问题、善于总结&lt;/li&gt;
&lt;li&gt;搞技术，切忌浮躁，踏实认真沉淀自己&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="编程人生" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>《浪潮之巅》读后小结</title>
    <link href="http://yoursite.com/2016/07/07/%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E8%AF%BB%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2016/07/07/《浪潮之巅》读后小结/</id>
    <published>2016-07-07T03:51:14.000Z</published>
    <updated>2017-11-09T05:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>《浪潮之巅》应该是我迄今为止，遇到的最喜欢的书了，可能源自对世界之巅的巨头公司的崇拜。这本书主要是讲近百年来这些巨头公司的兴衰。我从中摘抄了一些我印象比较深的一些话，可能并非书中原话，但我感觉差不多也就是这个意思。</p><h4 id="AT-amp-T"><a href="#AT-amp-T" class="headerlink" title="AT&amp;T"></a>AT&amp;T</h4><ul><li>时代造就了伟大的公司（乱世出英雄，顺应时代，顺势而为）</li><li>当一个公司，没有人、机构、有绝对的控制权并为它负责的时候，这个公司就危险了</li><li>看一个上市公司的好坏，只要看最优秀的人，是流进这家公司还是流出这家公司即可</li></ul><h4 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h4><ul><li>IBM不断的优化甚至淘汰，长期亏损和不盈利的非核心业务</li></ul><h4 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h4><ul><li>永远渴望，大智若愚</li></ul><h4 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h4><ul><li>高手过招取胜之道，在于抓住对手的失误</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《浪潮之巅》应该是我迄今为止，遇到的最喜欢的书了，可能源自对世界之巅的巨头公司的崇拜。这本书主要是讲近百年来这些巨头公司的兴衰。我从中摘抄了一些我印象比较深的一些话，可能并非书中原话，但我感觉差不多也就是这个意思。&lt;/p&gt;
&lt;h4 id=&quot;AT-amp-T&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="浪潮之巅" scheme="http://yoursite.com/tags/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85/"/>
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于职场</title>
    <link href="http://yoursite.com/2016/07/01/%E5%85%B3%E4%BA%8E%E8%81%8C%E5%9C%BA/"/>
    <id>http://yoursite.com/2016/07/01/关于职场/</id>
    <published>2016-07-01T07:25:27.000Z</published>
    <updated>2017-11-07T11:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>善于倾听，尤其是别人的意见甚至是批评，这是提高自己的最佳途径，工作之后给自己提建议的人并不多。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;善于倾听，尤其是别人的意见甚至是批评，这是提高自己的最佳途径，工作之后给自己提建议的人并不多。&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="职场生涯" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
</feed>
